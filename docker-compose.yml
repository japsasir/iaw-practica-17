version: '3.4'

services:
  # Balanceador de carga, enlazado a mysql.
  lb:
    image: dockercloud/haproxy
    ports:
      - 80:80
      - 1936:1936
    networks:
      - frontend-network
    # Los enlaces permiten que los contenedores se descubran entre sí
    # y transfieran de manera segura información sobre un contenedor 
    # a otro contenedor.
    links:
      - apache
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock
        
  apache:
    build: ./apache
    networks:
        - frontend-network
        - backend-network
    depends_on:
        - mysql
    restart: always   
    

    # Servicio MySQL. Esta vez usaremos variables de entorno.
    #El volumen ./sql se usa para ejecutar un script para nuestra base de datos ubicado en la carpeta mysql
  mysql:
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3306:3306"
    environment:
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
        - mysql_data:/var/lib/mysql
        - ./mysql:/docker-entrypoint-initdb.d
    networks:
        - backend-network
    restart: always

# Definimos las dos redes necesarias. Ojo con la indentación
networks:
    frontend-network:
    backend-network:

# Definimos los volúmenes disponibles
volumes:    
    mysql_data:
    

## Anexo: sobre 'PMA' (PhpMyAdmin)##

# Podemos fijar dos variables de entorno. PMA_HOST y PMA_ARBITRARY=1
# PMA_HOST nos permite indicar el nombre del contenedor con el que quiero conectarme desde phpMyAdmin.
# PMA_ARBITRARY=1 nos ofrecerá un cuadro de texto en el login de phpMyAdmin, indicando el nombre del contenedor al que quieres conectarte.
